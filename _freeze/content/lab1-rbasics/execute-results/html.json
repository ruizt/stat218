{
  "hash": "b4e5a727292e165667ac6120aa406770",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1: R Basics\"\nauthor: \"STAT218\"\nauthor-title: \"Course\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  message: false\nformat: html\n---\n\n\nThis lab is intended to introduce you to the basics in R that you will need for this class. Most of our analyses will consist of just a few steps:\n\n1. load a dataset\n2. identify and select variable(s) of interest\n3. perform one or more calculations using variable(s) of interest as inputs\n\nWe will illustrate this process so that you can get used to the mechanics and familiarize yourself with how different data types appear in R.\n\n### How to do this lab\n\nI've provided you with a project on Posit Cloud containing data files and a script (a script is a plain text file containing R commands). The script contains all commands shown in this document, and some blank areas for you to fill in, with comment lines (the ones starting with `#`) to help you navigate.\n\nYou should refer back to this document for instructions and context, and fill in the script as you go:\n\n- run the codes provided as you read through the narrative in this document and inspect the results\n- in the 'your turn' sections, refer to the prompt in this document and use the example commands provided immediately beforehand to determine which command to write\n- write in your commands **in the script** the space below the corresponding comment, **not in the console** (otherwise you'll have a hard time keeping track of your work)\n\nYour goal is to complete all of the \"your turn\" parts in the script. Two practice problems are given at the end of the lab as homework for you to complete on your own before next class.\n\n### How to use this lab\n\nThis lab (and the lab activities in general) are designed to provide you with a set of examples to learn initially in class and then follow on your own later when doing the homework problems given at the end of the lab.\n\nIf you can do the examples and 'your turn' activities in class, all you'll need to do to complete the homeworks is copy commands from those examples and activities and adjust some small details (variable names, dataset names, etc.).\n\nIf you later need to figure out how to do something in R for a homework problem or test, all you'll need to do is refer back to the labs.\n\n### Packages in R\n\nA \"package\" is a bundle of functions, datasets, and other objects that can be imported into R for use in your working environment. Many scripts begin by loading packages that will be used throughout the script. Packages are loaded using the command `library(<PACKAGE NAME>)` where `<PACKAGE NAME>` is replaced by the actual name of the package. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nPackages do need to be installed before they can be loaded. One of the nice things about using Posit Cloud is that I can manage all of these installs for you. However, if you ever wish to install and use a package that's not available (or if you use R on your own machine), you can install a package using the command `install.packages(\"<PACKAGE NAME>\")` after replacing `<PACKAGE NAME>` with the actual name of the package (but keeping the quotation marks!).\n\n### Loading a dataset\n\nThere are several ways to load datasets in R. The strategy we'll use most often is to load an `.RData` file, but you will encounter a few others here and there.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load nhanes data\nload('data/nhanes.RData')\n```\n:::\n\n\nThis command looks for a file called `nhanes.RData` in a directory folder named `data` and reads the file. \n\nNotice that once you run the command, an object called `nhanes` appears in the \"Environment\" tab in the upper right hand panel of your RStudio window. \n\nIf you click the little blue carrot next to `nhanes` in the environment tab, you will then see a list of variables contained in the dataset. You can also see the first few rows of the dataset using `head(...)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first few rows\nhead(nhanes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n  subj.id gender   age poverty pulse bpsys1 bpdia1 totchol sleephrsnight\n    <int> <fct>  <int>   <dbl> <int>  <int>  <int>   <dbl>         <int>\n1       1 male      34    1.36    70    114     88    3.49             4\n2       2 male      34    1.36    70    114     88    3.49             4\n3       3 male      34    1.36    70    114     88    3.49             4\n4       5 female    49    1.91    86    118     82    6.7              8\n5       8 female    45    5       62    106     62    5.82             8\n6       9 female    45    5       62    106     62    5.82             8\n```\n\n\n:::\n:::\n\n\nThis kind of object in R is called a **data frame**. Data frames are displayed in a tabular layout, like a spreadsheet. While data frames *should* be arranged so that observations are shown in rows and variables in columns, this is not guaranteed, so you should be in the habit of checking to make sure the layout is sensible; otherwise, you might accidentally perform bogus calculations and analyses.\n\nBeyond providing a sanity check, inspecting the data frame will show you three key pieces of information besides the values of the first few observations of each variable.\n\n1. Data dimensions: how many observations (rows) and how many variables (columns)\n2. Variable names: `subj.id`, `gender`, `age`, etc.\n3. Data types: \n    \n    + `int` for integer (numerical data type)\n    + `fct` for factor (categorical data type)\n    + `num` for numeric (numerical data type)\n    + `chr` for character (categorical data type)\n\nSo, for example, seeing that `pulse` is of data type `int` tells you that pulse is a discrete numerical variable. It also tells you what name to use to refer to the variable in subsequent R commands.\n\n::: callout-tip\n## Your turn\n\nThere is another data file in the `data` directory called `famuss.RData`. Load this into the environment, preview the first few observations, and check the variable names and data types.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load famuss dataset\n\n# preview first few rows\n```\n:::\n\n\nTo check your understanding:\n\n- how many observations and variables?\n- identify a categorical variable\n- what kind of variable is `bmi`?\n\n:::\n\n### Selecting variables\n\nThe variable names in a dataset can be used to retrieve or refer to specific variables. For example, try running this command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract total cholesterol\ntotal.cholesterol <- nhanes$totchol\n\n# preview first few values\nhead(total.cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.49 3.49 3.49 6.70 5.82 5.82\n```\n\n\n:::\n:::\n\n\nThat command did the following:\n\n- extracted the `totchol` column of `nhanes` (the `nhanes$totchol` part) \n- *assigned* the result a new name `total.cholesterol` (the `<-` part)\n\nAssignment (`<-`) is a very important concept in R -- you can store the result of any calculation as an object with a name of your choosing.\n\nYou'll notice that `total.cholesterol` looks a bit different than the data frame in terms of its appearance. This is because it's not a data frame but rather a different kind of object called a **vector**: a collection of values of the same data type.\n\n::: callout-tip\n## Your turn\n\nExtract the change in nondominant arm strength variable from the FAMuSS dataset, and store it as a vector called `strength`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# store the change in nondominant arm strength variable as a vector called 'strength'\n\n# preview the first few values\n```\n:::\n\n\n:::\n\n### Performing calculations\n\nExtracting and storing variables as vectors isn't strictly necessary, but does make it easier to perform many calculations. While you're a beginner, I'd recommend using this strategy.\n\n#### Numeric summaries\n\nMost simple summary statistics can be calculated using simple functions in R that take a single vector argument. For example, to calculate the average, minimum, and maximum total cholesterol among the respondents in the sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# average total cholesterol\nmean(total.cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.042938\n```\n\n\n:::\n\n```{.r .cell-code}\n# minimum\nmin(total.cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.33\n```\n\n\n:::\n\n```{.r .cell-code}\n# maximum\nmax(total.cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.65\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n## Your turn\n\nFind the average percent change in nondominant arm strength of participants in the FAMuSS study sample using the `strength` vector you created before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute mean change in nondominant arm strength\n```\n:::\n\n\n:::\n\n#### Categorical summaries\n\nMost data summaries for categorical variables proceed from counts of the number of observations in each category. These counts can be obtained by passing a vector of observations to `table(...)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retreive sex variable\nsex <- nhanes$gender\n\n# counts\ntable(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsex\nfemale   male \n  1588   1591 \n```\n\n\n:::\n:::\n\n\nTo obtain the proportion of observations in each category -- the counts divided by the total number of observations -- pass the table to the `proportions(...)` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# proportions\ntable(sex) |> proportions()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsex\n   female      male \n0.4995282 0.5004718 \n```\n\n\n:::\n:::\n\n\nThe character string `|>` is a bit of syntax that you could read verbally as 'then': first make a table, *then* obtain proportions. It's known as the pipe operator, because it 'pipes' the result of the command on its left into the command on its right. \n\nTo see another example of the pipe operator in action, you could rewrite the previous command as a chain of three steps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same as above\nsex |> table() |> proportions()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsex\n   female      male \n0.4995282 0.5004718 \n```\n\n\n:::\n:::\n\n\nYou could interpret this as follows: start with `sex`, pass that to `table()`, then pass the result to `proportions`.\n\n::: callout-tip\n\n## Your turn\n\nUsing the FAMuSS dataset, calculate the genotype frequencies in the sample (*i.e.*, find the proportion of observations of each genotype).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retrieve genotype\n\n# counts\n\n# proportions\n```\n:::\n\n:::\n\nWhile the analyses you'll learn will get more complex than computing summary statistics, the mechanics of performing the computations in R will be analogous to what you just did: executing a one-line command with a vector input.\n\n### Putting together the pieces\n\nReflect for a moment on what you just did: you wrote a few lines of code to import a dataset, extract a variable, and compute a statistic. If you filled in the script as instructed, you now have a record of the commands you executed that you can use to retrace your steps. \n\nIn fact, anyone with your script and the data files (including future you) could easily reproduce your work. Reproducibility is a pillar of data-driven science; by storing analyses in the form of executable scripts, researchers can easily create and share records of their work.\n\nWe could put the steps above together in just a few lines as if it were a short script. Typical style is to provide line-by-line comments explaining what the commands do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import nhanes data\nload('data/nhanes.RData')\n\n# inspect data\nhead(nhanes)\n\n# extract total cholesterol\ntotal.cholesterol <- nhanes$totchol\n\n# compute average total cholesterol\nmean(total.cholesterol)\n\n# extract sex\nsex <- nhanes$gender\n\n# proportions of men and women in sample\ntable(sex) |> proportions()\n```\n:::\n\n\n::: callout-tip\n## Your turn\n\nFollow the example above and combine the previous exercises into a few lines of code with appropriate line comments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load famuss dataset\n\n# inspect data\n\n# extract nondominant change in arm strength\n\n# compute average change in strength\n\n# extract genotype\n\n# compute genotype frequencies (proportions)\n```\n:::\n\n\n:::\n\nIf this was all entirely new to you, congratulations on writing your first lines of code!\n\n### Extras\n\n#### Reading CSV files\n\nOften data are stored in spreadsheets, which can be easily converted to comma-separated values or CSV files (extension `.csv`). These are plain-text files that are a bit more lightweight than an Excel spreadsheet.\n\nR can read CSV (as well as other) files. The `read.csv(...)` function will parse the file and produce a data frame. The result can be assigned a name and stored as an object in the environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# parse a csv file\nread.csv('data/gss.csv')\n\n# store the result in the environment\ngss <- read.csv('data/gss.csv')\n```\n:::\n\n\nMost of the time in class we'll load `.RData` files or obtain datasets through packages (more on this later), but if you use R outside of class you may find it more common to manage data input via `.csv` files.\n\n#### More about R\n\nWhile you will learn new commands going forward, we won't go much more in depth with R than what you just saw. However, if you're interested in understanding the above concepts in greater detail, or learning about R as a programming environment, see [An Introduction to R](https://intro2r.com).\n\n### Practice problems\n\nDue before the next class meeting.\n\n1. The `census` dataset contains a sample of data for 377 individuals included in the 2000 U.S. census. Load and inspect the dataset, and determine:\n\n    (a) the youngest and oldest individual in the sample\n    (b) the average total personal income\n    (c) the average total family income\n    (d) how many variables are in the dataset, not including census year and FIPS code\n    (e) how many *categorical* variables are in the dataset, not including FIPS code\n\n\n::: {.cell}\n\n:::\n\n\n2. The `cdc.samp` dataset in the `oibiostat` package contains a sample of data for 60 individuals surveyed by the CDC's Behavioral Risk Factors Surveillance System (BRFSS). Use the provided commands to load the dataset, and then inspect it the usual way. Notice that several of the variables are 1's and 0's. Use the command `?cdc.samp` to view the data documentation.\n\n    (a) What do the values (1's and 0's) mean in the `exerany` variable?\n    (b) What proportion of the sample are men? What proportion are women?\n    (c) For each general health category, find the proportion of respondents who rated themselves in that category.\n    (d) How many of the respondents have health coverage? (*Hint:* `sum(x)` will add up the values in a vector `x`; adding up a collection of 1's and 0's is equivalent to counting the number of 1's.) What percentage of the respondents have health coverage?\n    \n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}